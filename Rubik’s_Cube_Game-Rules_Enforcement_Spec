# Rubik’s Cube Game — Rules & Enforcement Spec

This document defines how our **game enforces official Rubik’s Cube rules** (aligned with WCA) and what is configurable for casual vs. competitive modes.

---

## 🎛️ Modes
- **Casual Mode (default)**: No penalties, timer optional, unlimited undo, free camera.  
- **Competitive Mode (WCA‑like)**: Official scramble, 15s inspection, penalties, strict timing, no undo.

Switch with setting: `mode = "casual" | "competitive"` in `config.py`.

---

## ✅ Legality of Moves
- Only allow quarter‑turns and half‑turns: `U, D, L, R, F, B, U', D', L', R', F', B', U2, D2, L2, R2, F2, B2`.
- Block slice, whole‑cube, and wide turns **unless** explicitly enabled:
  - `allow_wide_moves = False` (enables `Rw, Lw, Uw, Dw, Fw, Bw` if `True`).
  - `allow_cube_rotations = True` (virtual `x, y, z` camera‑anchored rotations; do **not** count as moves).
- Enforce **single move at a time**; while animation runs, input for the same face is queued or ignored based on `queue_moves`.

---

## 🧠 State & Solved Definition
- Solved when **each face** has 9 stickers of the same color and all cubies match a canonical orientation.
- Implement `is_solved(state) -> bool` and `misplaced_count(state) -> int` for HUD.

---

## 🔀 Scramble Rules
- Use WCA‑style random state scrambler:
  - No consecutive moves on the **same face**.
  - Avoid trivial cancellations (e.g., `R R'`).
  - Default length: `scramble_len = 20` (configurable per WCA guidelines; 3×3 uses ~25 in official tools).
- Seeded scrambles for reproducibility: `scramble_seed`.
- Save and show scramble string on HUD.

---

## ⏱️ Timing & Inspection
- **Inspection** (competitive): `inspection_seconds = 15` countdown.  
  - Start button arms timer; any move before start ends inspection and starts solve.
  - Overrun handling: if 15–17s → `+2s` penalty; if >17s → `DNF` (per WCA 2025: configurable; default to classic rule).
- **Solve Timer**: Starts on the **first legal move**. Stops when `is_solved(state)` transitions to `True` and input is released.
- **Pausing**: Disabled in competitive mode (`pause_allowed = False`).

---

## 🧾 Penalties & DNF
- **+2s**: Final layer within **≤45° misalignment** when stopping; auto‑snap to nearest legal state and add `+2s`.
- **DNF** events:
  - Exceeded inspection limit (>17s if classic rule).  
  - Illegal operation (if `strict_illegal = True`): e.g., disassembly (should not occur in software), invalid state injection, or forced state edits.
- Penalties stored in run record: `{time_ms, penalties: ["+2"], dnf: bool, scramble, date}`.

---

## 🎮 Input Rules
- Keyboard shortcuts (competitive default):
  - Moves: `R U F L D B` (with `'` via `Shift` or `'` key; `2` for double turns).
  - Camera: Mouse drag/scroll; not counted as moves.
  - Disable **Undo/Redo** in competitive: `allow_undo = False`.
- Casual: Allow `undo/redo`, macro replay, and remapping.

---

## 🧩 Color & Cube Validity
- Default color scheme: **WCA standard** ([WCA Regulations §3]).
- Enforce valid color layout on reset; block custom layouts in competitive.
- Cube size fixed to 3×3; other sizes require separate rule sets.

---

## 🧪 Validation Hooks (APIs)
- `validate_move(move, state) -> bool` — checks legality before applying.
- `apply_move(move, state, animate=True)` — updates state and triggers animation.
- `generate_scramble(len, seed) -> str` — returns a legal scramble.
- `start_inspection() / start_solve()` — lifecycle controls.
- `finish_solve()` — stops timer, computes penalties, writes record.

---

## 📊 HUD Requirements (Competitive)
- Scramble string.
- Inspection countdown.
- Live timer (ms precision).
- Move counter and last move.
- Penalties indicator; final time with `+2` if applicable.

---

## ⚙️ Config (example `config.py`)
```python
mode = "competitive"  # or "casual"
allow_wide_moves = False
allow_cube_rotations = True
queue_moves = True
allow_undo = False

inspection_seconds = 15
scramble_len = 25
strict_illegal = True
```

---

## 🔗 Compliance
- Designed to align with **WCA Regulations** for 3×3 speedsolving (notation, timing, inspection, penalties).  
- For exact legal wording and updates, consult the WCA regs.

---

## 🗂️ Implementation Plan
- [ ] Implement state model and `is_solved`.
- [ ] Add `validate_move` and restrict inputs to legal moves.
- [ ] Build scramble generator with constraints.
- [ ] Implement inspection + solve timers and penalty logic.
- [ ] Add HUD items and persistent run logs.
- [ ] Gate features by `mode` (casual vs competitive).
```}
